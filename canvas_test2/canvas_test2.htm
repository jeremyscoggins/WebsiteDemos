<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN"> 
<html> 
<head> 
	
	<title>JT Development Inc.</title> 
 
	<style type="text/css"> 
 
	body {
	font-family: "Georgia";
	color: #000000;
	font-size: 1.0em;
	padding: 20px;
	margin: 0px;
	background: #CCCCCC;
}
	p { margin: 0 0 15px; }
	#container { width: 100%; height: 100%; display: table; }
	#position { display: table-cell; vertical-align: middle; }
	#content {
	background: url(ipad_template.png) no-repeat center center;
	text-align: center;
	height: 479px;
	width: 690px;
	margin-right: auto;
	margin-left: auto;
	padding-top: 61px;
}	
 
	</style> 
 
	<!--[if IE]>
 
		<STYLE type="text/css">
 
		#container { position: relative; }
		#position { position: absolute; top: 50%; }
		#content { position: relative; top: -50%; }
 
		</STYLE>
 
	<![endif]--> 
	
<script type="text/javascript"> 
			var deg2rad = new Array();
			var deg2cos = new Array();
			var deg2sin = new Array();
			for (a = 0 ; a<=360;a++){
			  deg2rad[a]=a*(Math.PI/180);
			  deg2cos[a]=Math.cos(deg2rad[a]);
			  deg2sin[a]=Math.sin(deg2rad[a]);
			}
			Array.prototype.clone = function () {var a = new Array(); for (var property in this) {a[property] = typeof (this[property]) == 'object' ? this[property].clone() : this[property]} return a}
			function resizeAndPosition(objectPoints,size,positionX,positionY,positionZ){
				returnObject=[];
				for(var x=0;x<objectPoints.length;x++){
					polyPoints = objectPoints[x].clone();
					for(pt =0;pt<polyPoints.length;pt++){
						polyPoints[pt][0]*=size;
						polyPoints[pt][1]*=size;
						polyPoints[pt][2]*=size;
	
						polyPoints[pt][0]+=positionX;
						polyPoints[pt][1]+=positionY;
						polyPoints[pt][2]+=positionZ;
					}
					returnObject.push(polyPoints);
				}
				return returnObject;
			}
			function translate(obj,xt,yt,zt){
				for(var x=0;x<obj.length;x++){
					for(y=0;y<obj[x].length;y++){
							obj[x][y].x+=xt;
							obj[x][y].y+=yt;
							obj[x][y].z+=zt;
					}
				}
				//return obj;
			}
			function rotate(obj,xa,ya,za){
				var xmin=10000,xmax=-10000,ymin=10000,ymax=-10000,zmin=10000,zmax=-10000;
				for(var x=0;x<obj.length;x++){
					for(y=0;y<obj[x].length;y++){
							xmin=Math.min(obj[x][y].x,xmin);
							xmax=Math.max(obj[x][y].x,xmax);
							ymin=Math.min(obj[x][y].y,ymin);
							ymax=Math.max(obj[x][y].y,ymax);
							zmin=Math.min(obj[x][y].z,zmin);
							zmax=Math.max(obj[x][y].z,zmax);
							//obj[x][y].x+=xt;
							//obj[x][y].y+=yt;
							//obj[x][y].z+=zt;
					}
				}
				xCenter = (xmin+xmax)/2;
				yCenter = (ymin+ymax)/2;
				zCenter = (zmin+zmax)/2;
				//console.log(xCenter,yCenter,zCenter);
				for(var x=0;x<obj.length;x++){
					for(y=0;y<obj[x].length;y++){
					xTemp = obj[x][y].x-xCenter;					
					yTemp = obj[x][y].y-yCenter;					
					zTemp = obj[x][y].z-zCenter;					

					//x rotate
					y2=yTemp*deg2cos[xa]-zTemp*deg2sin[xa]
					z2=yTemp*deg2sin[xa]+zTemp*deg2cos[xa]
					yTemp=y2;
					zTemp=z2;

					//y rotate
					z2=zTemp*deg2cos[ya]-xTemp*deg2sin[ya]
					x2=zTemp*deg2sin[ya]+xTemp*deg2cos[ya]
					zTemp=z2;
					xTemp=x2;

					//z rotate
					x2=xTemp*deg2cos[za]-yTemp*deg2sin[za]
					y2=xTemp*deg2sin[za]+yTemp*deg2cos[za]
					xTemp=x2;
					yTemp=y2;


					obj[x][y].x=xTemp+xCenter;
					obj[x][y].y=yTemp+yCenter;
					obj[x][y].z=zTemp+zCenter;
					}
				}
				//return obj;


				//z-axis rotation
				//x2=x*deg2cos(a)-y*deg2sin(a)
				//y2=x*deg2sin(a)+y*deg2cos(a)
				//z2=z

				//x-axis rotation
				//y2=y*deg2cos(a)-z*sin(a)
				//z2=y*sin(a)+z*deg2cos(a)
				//x2=x

				//y-axis rotation

				//z2=z*deg2cos(a)-x*sin(a)
				//x2=z*sin(a)+x*deg2cos(a)
				//y2=y

			}

			function restrict360(ang){
					if(ang < 0)
					  return ang+360;
					if(ang > 360)
					  return ang-360;
					return ang;
			}
			function drawline(point1,point2){
					if(checkbounds(point1,game.main.screenWidth,game.main.screenHeight,8000) || checkbounds(point2,game.main.screenWidth,game.main.screenHeight,8000)){
						game.main.context.beginPath();
						game.main.context.moveTo(point1.projectedX, point1.projectedY);
						game.main.context.lineTo(point2.projectedX, point2.projectedY);
						game.main.context.stroke();
						//console.log("line:"+point1.projectedX+","+point1.projectedY+" "+point2.projectedX+","+point2.projectedY+" ");
					}
			}
			function drawpoly(points){
					game.main.context.beginPath();
					boundsCheck=0;
					for(x=0;x<points.length;x++)
					{
						if(checkbounds(points[x],game.main.screenWidth,game.main.screenHeight,8000))
							boundsCheck++;
						if(x==0)
							game.main.context.moveTo(points[x].projectedX, points[x].projectedY);
						else 
							game.main.context.lineTo(points[x].projectedX, points[x].projectedY);
					}
					if(boundsCheck==0){
						return;
					} else if(boundsCheck<points.length){
						for(x=1;x<points.length;x++){
							drawline(points[x-1],points[x]);
						}
						drawline(points[points.length-1],points[0]);
					} else{
						game.main.context.lineTo(points[0].projectedX, points[0].projectedY);
						//cube.main.context.fill();
						game.main.context.stroke();
					}
			}
			function checkbounds(point1,x,y,z){
				if(point1.projectedX > 0 && point1.projectedX < x && point1.projectedY > 0 && point1.projectedY < y && point1.translatedZ > 0 && point1.translatedZ < z)
					return true;
				else
					return false;
			}
			function rawtoobj(raw){
				var obj=[];
				for(var i =0;i<raw.length;i++){
					var rawPoly=raw[i];
					var poly=new Array();
					for( var j = 0; j < rawPoly.length; j++ )
					{
						poly[j]= new game.Point();
						var p = poly[j];
						p.x = rawPoly[j][ 0 ]; //(Math.random()*30) << 0;
						p.y = rawPoly[j][ 1 ];
						p.z = rawPoly[j][ 2 ];
					}
					obj.push(poly);
				}
				return obj;
			}
			box = [
					[[ -10, -10, -10 ], [ 10, -10, -10 ], [ 10, 10, -10 ], [ -10, 10, -10 ]],
					//back
					[[ -10, -10, 10 ], [ 10, -10, 10 ], [ 10, 10, 10 ], [ -10, 10, 10 ]],
					//left
					[[ -10, -10, -10 ], [ -10, -10, 10 ], [ -10, 10, 10 ], [ -10, 10, -10 ]],
					//right
					[[ 10, -10, -10 ], [ 10, -10, 10 ], [ 10, 10, 10 ], [ 10, 10, -10 ]],
					//top
					[[ -10, -10, -10 ], [ 10, -10, -10 ], [ 10, -10, 10 ], [ -10, -10, 10 ]],
					//bottom
					[[ -10, 10, -10 ], [ 10, 10, -10 ], [ 10, 10, 10 ], [ -10, 10, 10 ]]	
			];

			tank = [
					[[ -20, -10, -30 ], [ 20, -10, -30 ], [ 20, 10, -30 ], [ -20, 10, -30 ]],
					//back
					[[ -20, -10, 30 ], [ 20, -10, 30 ], [ 20, 10, 30 ], [ -20, 10, 30 ]],
					//left
					[[ -20, -10, -30 ], [ -20, -10, 30 ], [ -20, 10, 30 ], [ -20, 10, -30 ]],
					//right
					[[ 20, -10, -30 ], [ 20, -10, 30 ], [ 20, 10, 30 ], [ 20, 10, -30 ]],
					//top
					[[ -20, -10, -30 ], [ 20, -10, -30 ], [ 20, -10, 30 ], [ -20, -10, 30 ]],
					//bottom
					[[ -20, 10, -30 ], [ 20, 10, -30 ], [ 20, 10, 30 ], [ -20, 10, 30 ]],	



					[[ -5, 0, -5 ], [ 5, 0, -5 ], [ 5, 30, -5 ], [ -5, 30, -5 ]],
					//back
					[[ -5, 0, 5 ], [ 5, 0, 5 ], [ 5, 30, 5 ], [ -5, 30, 5 ]],
					//left
					[[ -5, 0, -5 ], [ -5, 0, 5 ], [ -5, 30, 5 ], [ -5, 30, -5 ]],
					//right
					[[ 5, 0, -5 ], [ 5, 0, 5 ], [ 5, 30, 5 ], [ 5, 30, -5 ]],
					//top
					[[ -5, 0, -5 ], [ 5, 0, -5 ], [ 5, 0, 5 ], [ -5, 0, 5 ]],
					//bottom
					[[ -5, 30, -5 ], [ 5, 30, -5 ], [ 5, 30, 5 ], [ -5, 30, 5 ]]	

			];
			tree = [
			
					[[ -2, 30, -2 ], [ 2, 30, -2 ], [ 10, -10, -10 ], [ -10, -10, -10 ]],
					//back
					[[ -2, 30, 2 ], [ 2, 30, 2 ], [ 10, -10, 10 ], [ -10, -10, 10 ]],
					//left
					[[ -2, 30, -2 ], [ -2, 30, 2 ], [ -10, -10, 10 ], [ -10, -10, -10 ]],
					//right
					[[ 2, 30, -2 ], [ 2, 30, 2 ], [ 10, -10, 10 ], [ 10, -10, -10 ]],
					//top
					[[ -2, 30, -2 ], [ 2, 30, -2 ], [ 2, 30, 2 ], [ -2, 30, 2 ]],
					//bottom
					[[ -10, -10, -10 ], [ 10, -10, -10 ], [ 10, -10, 10 ], [ -10, -10, 10 ]]
			];

			projectile = [
					
					
					//front
					[[ 0, 30, 0 ], [ -5, 10, -5 ], [ 5, 10, -5 ]],
					//back
					[[ 0, 30, 0 ], [ -5, 10, 5 ], [ 5, 10, 5 ]],
					//left
					[[ 0, 30, 0 ], [ -5, 10, -5 ], [ -5, 10, 5 ]],
					//right
					[[ 0, 30, 0 ], [ 5, 10, -5 ], [ 5, 10, 5 ]]
			];

		
			var game = {};
			game.Point = function(){
				this.x;
				this.y;
				this.z;

				this.translatedX;
				this.translatedY;
				this.translatedZ;
				
				this.projectedX;
				this.projectedY;
			};
			
		    game.main = {
				hfov : 66.5 * Math.PI / 180,
				vfov : 50 * Math.PI / 180,
				maxDistance : 800,
				
				world : [],
				projectiles:[],
				players:[],
				camera : null,
				keys : [],
				
				//objects : [],				
				hViewDistance : 0,
				vViewDistance : 0,
				screenWidth : 0,
				screenHeight : 0,
				context : null,
								
				init : function(){
					if( !document.getElementById( "screen" ).getContext ) return;
					this.context = document.getElementById( "screen" ).getContext( "2d" );
					this.screenWidth = document.getElementById( "screen" ).offsetWidth;
					this.screenHeight = document.getElementById( "screen" ).offsetHeight;
					
					// Set up the view distance based on the field-of-view (with pythagoras)
					this.hViewDistance = ( this.screenWidth / 2 ) / Math.tan( this.hfov / 2 );
					this.vViewDistance = ( this.screenHeight / 2 ) / Math.tan( this.vfov / 2 );
					
					// Create a camera point
					//this.camera = new game.Point();
					this.camera = {x:0,y:0,z:0,xa:0,ya:0,za:0};
					
					//for(x=1;x<=20;x++){
					//	this.world=this.world.concat(resizeAndPosition(box,Math.random()*3/10+.1,Math.random()*100-50,Math.random()*2+20,Math.random()*100-50));
					//}
					groundPoints=[];
					elev=-10;
					for(x=0;x<=20;x++){
						groundPoints[x]=[];
						for(y=0;y<=20;y++){
						  elev+=Math.random()*10-5;
						  //this.world=this.world.concat([[x-5,elev,y-5],[x+5,elev,y-5],[x+5,elev,y+5],[x-5,elev,y+5]]);
						  groundPoints[x][y]=elev;
						}
					}
					groundRaw=[];
					xm=0;
					for(x=-500;x<500;x+=50){
					ym=0;
						for(y=-500;y<500;y+=50){
						  //elev=Math.random()*6-3;
						  //console.log(x+" "+y+" "+xm+" "+ym+" ");
						  //this.world.push(polytopoints([[x-25,groundPoints[xm][ym],y-25],[x+25,groundPoints[xm+1][ym],y-25],[x+25,groundPoints[xm+1][ym+1],y+25],[x-25,groundPoints[xm][ym+1],y+25]]));
						  groundRaw.push([[x-25,groundPoints[xm][ym],y-25],[x+25,groundPoints[xm+1][ym],y-25],[x+25,groundPoints[xm+1][ym+1],y+25],[x-25,groundPoints[xm][ym+1],y+25]]);
  						  if(Math.round(Math.random()*5)==2 && xm!=0 && ym!=0)
	  						  this.world.push(rawtoobj(resizeAndPosition(tree,Math.random()*10/100+.15,x,(groundPoints[xm][ym]+groundPoints[xm+1][ym+1])/2+1,y)));

						  //groundPoints[x][y]=elev;
						  ym++;
						}
						xm++;
					}
					//put the ground into the world
					this.world.push(rawtoobj(groundRaw));
					
					//add the projectile to the world
					this.projectiles.push(rawtoobj(resizeAndPosition(projectile,1,0,100,0)));
					rotate(this.projectiles[this.projectiles.length-1],90,235,0);
					this.world.push(this.projectiles[this.projectiles.length-1]);

					//add the players to the world
					this.players.push(rawtoobj(resizeAndPosition(tank,.3,450,groundPoints[20][20]+5,450)));
					rotate(this.players[this.players.length-1],0,90,0);
					this.world.push(this.players[this.players.length-1]);

					this.players.push(rawtoobj(resizeAndPosition(tank,.3,-500,groundPoints[0][0]+5,-500)));
					rotate(this.players[this.players.length-1],0,90,0);
					this.world.push(this.players[this.players.length-1]);


					
					/*setInterval(function(){
					game.main.players.push(rawtoobj(resizeAndPosition(tree,1,Math.random()*1000-500,Math.random()*90+10,Math.random()*1000-500)));
					game.main.world.push(game.main.players[game.main.players.length-1]);
					
					},1000);*/
					
					//console.log(this.world[0].length);

					//this.player=polytopoints(resizeAndPosition(tree,.5,0,100,0));
					//this.objects.push([this.player]);
					
					// Init the game points
					/*for( var i = 0; i < this.world.length; i++ )
					{
						var p = new game.Point();
						this.points.push( p );						
					}*/
					this.reset();		
					this.run();
				},
				
				reset : function(){
					// Reset the camera and game to front & centre
					this.camera.x = -550;
					this.camera.y = -200;
					this.camera.z = -550;
					this.camera.xa = -25;
					this.camera.ya = 135;
					
					// Init the game
					/*for( var i = 0; i < this.world.length; i++ )
					{
						this.points[i]=[];
						var p = this.points[ i ];
						p.x = this.world[ i ][ 0 ]; //(Math.random()*30) << 0;
						p.y = this.world[ i ][ 1 ];
						p.z = this.world[ i ][ 2 ];
					}*/
					//add the world to the points array
					//this.objects = this.world;
					
				},
				
				run : function(){
					var that = this;
					
					// Run the main loop
					(function tick(){
						that.update();
						that.draw();
						setTimeout( function(){ that.run(); }, 20 );						
					})();
				},
				
				update : function(){
					// Update the camera position from keyboard
					//this.camera.x += this.keys[0] ? -0.2 : this.keys[1] ? 0.2 : 0;
					//this.camera.y += this.keys[2] ? 0.2 : this.keys[3] ? -0.2 : 0;
					//this.camera.z += this.keys[8] ? 0.2 : this.keys[9] ? -0.2 : 0;
					//this.camera.z += this.keys[3] ? 0.5 : this.keys[2] ? -0.5 : 0;
					for(x=0;x<this.projectiles.length;x++){
						//if(this.projectiles[x][0][0].y>-10)
							//translate(this.projectiles[x],0,-2,0);

					//rotate(this.projectiles[x],10,0,0);
					}

					//this.camera.ya += this.keys[4] ? 1 : this.keys[5] ? -1 : 0;
					this.camera.ya += this.keys[0] ? 2 : this.keys[1] ? -2 : 0;
					this.camera.xa += this.keys[6] ? 2 : this.keys[7] ? -2 : 0;
					/*if(this.camera.ya < 0)
					  this.camera.ya+=360;
					if(this.camera.ya > 360)
					  this.camera.ya-=360;*/
					this.camera.ya=restrict360(this.camera.ya);
					this.camera.xa=restrict360(this.camera.xa);
					if(this.keys[3]){
	 					 this.camera.x -= 5*deg2cos[restrict360(this.camera.ya-90)];
	  					 this.camera.z -= 5*deg2sin[restrict360(this.camera.ya-90)];
	  					//this.camera.z+=2;
					}else if (this.keys[2]){
	 					 this.camera.x += 5*deg2cos[restrict360(this.camera.ya-90)];
	  					 this.camera.z += 5*deg2sin[restrict360(this.camera.ya-90)];
	  					//this.camera.z-=2;
					}	

					//loop through the objects				
					for( var i in this.world){
						var curObject = this.world[ i ];
						//loop through the polys
						for (var k in curObject)
						{
							var poly=curObject[k];

							// loop through and update the points									
							for(var j in poly){
								var point=poly[j];
						
						
						
								point.translatedX=point.x;
								point.translatedY=point.y;
								point.translatedZ=point.z;

								//angRad = ang*(Math.PI/180);
								//z2=point.z*Math.cos(angRad)-point.x*Math.sin(angRad);
								//x2=point.z*Math.sin(angRad)+point.x*Math.cos(angRad);
								//y2=point.y;
						
								//rotate the cube
								/*
								ang=1;
								point.translatedZ=point.z*deg2cos[ang]-point.x*deg2sin[ang];
								point.translatedX=point.z*deg2sin[ang]+point.x*deg2cos[ang];
								point.translatedY=point.y;
								*/



								//apply the rotation back to the cube, this makes it spin
								//point.x=point.translatedX;
								//point.y=point.translatedY;
								//	point.z=point.translatedZ;

								// Apply camera transform		
								//point.x += this.camera.x;
								//point.y += this.camera.y;
								//point.z += this.camera.z;											

								//apply the camera poisition
								point.translatedX += this.camera.x;
								point.translatedY += this.camera.y;
								point.translatedZ += this.camera.z;											
 
 
								//apply the camera y rotation
								tX=point.translatedX;
								tZ=point.translatedZ;
							
								point.translatedZ=tZ*deg2cos[this.camera.ya]-tX*deg2sin[this.camera.ya];
								point.translatedX=tZ*deg2sin[this.camera.ya]+tX*deg2cos[this.camera.ya];
								//point.translatedY=point.translatedY;

								//apply the camera x rotation
								tY=point.translatedY;
								tZ=point.translatedZ;
							
								point.translatedY=tY*deg2cos[this.camera.xa]-tZ*deg2sin[this.camera.xa];
								point.translatedZ=tY*deg2sin[this.camera.xa]+tZ*deg2cos[this.camera.xa];
								//point.translatedX=point.translatedX;
	
	
	
	
								// Project to 2D space
								//point.projectedX = ( point.x * this.hViewDistance ) / point.z;
								//point.projectedY = ( point.y * this.vViewDistance ) / point.z;
								point.projectedX = ( point.translatedX * this.hViewDistance ) / point.translatedZ;
								point.projectedY = ( point.translatedY * this.vViewDistance ) / point.translatedZ;
 	
								// Transform from X/Y to screen coordinates
								point.projectedX += this.screenWidth / 2;
								point.projectedY = ( this.screenHeight / 2 ) - point.projectedY;
								
								//point.projectedX = Math.floor(point.projectedX);
								//point.projectedY = Math.floor(point.projectedY);
							}
						}
					}
 
				},
				
				draw : function(){
					var ctx = this.context;
					ctx.fillStyle = "#000";
					ctx.fillRect( 0, 0, this.screenWidth, this.screenHeight );
 
					ctx.strokeStyle = "#090";
					ctx.lineWidth = 1;
					
					// Draw the polys
					for( var i = 0; i < this.world.length; i++ ){
						var curObject = this.world[ i ];
						//loop through the polys
						for (var k=0;k<curObject.length;k++)
						{
							drawpoly(curObject[k]);
						}
					}
					/*
					//expiriment
					ctx.beginPath();
					xo = 100;
					yo = 100;
					size = 100;
					modifier=5;
					
					for(x=0;x<11;x++){
					ctx.moveTo(xo+size/2,yo);
					ctx.quadraticCurveTo(xo+size-modifier-x*5,yo+modifier,xo+size-x*5,yo+size/2);
					ctx.quadraticCurveTo(xo+size-modifier-x*5,xo+size-modifier,xo+size/2,yo+size);
					ctx.quadraticCurveTo(xo+modifier+x*5,yo+size-modifier,xo+x*5,yo+size/2);
					ctx.quadraticCurveTo(xo+modifier+x*5,yo+modifier,xo+size/2,yo);
					ctx.stroke();
					}
					ctx.strokeRect(100,100,100,100);
					*/
				},
 
				key : function( e, state ){
					var code = 0;
					if (!e) var e = window.event;
					if (e.keyCode) code = e.keyCode;
					else if (e.which) code = e.which;
					switch ( code ){
						case 37: this.keys[ 0 ] = state; break; // left
						case 38: this.keys[ 2 ] = state; break; // up
						case 39: this.keys[ 1 ] = state; break; // right
						case 40: this.keys[ 3 ] = state; break;// down

						case 65: this.keys[ 4 ] = state; break; // a
						case 87: this.keys[ 6 ] = state; break; // w
						case 68: this.keys[ 5 ] = state; break; // s
						case 83: this.keys[ 7 ] = state; break;//  d


						case 32: this.keys[ 8 ] = state; break; // space bar;
						case 17: this.keys[ 9 ] = state; break; // ctrl
					}
				}
			};
			
			window.addEventListener( "load", function(){ game.main.init(); }, false);
			window.addEventListener( "keydown", function( e ){ game.main.key( e, true ); }, false);
			window.addEventListener( "keyup", function( e ){ game.main.key( e, false ); }, false);
			window.addEventListener( "click", function( e ){ game.main.reset(); }, false );
</script> 
 
</head> 
 
<body> 
  
	<div id="container"> 
		<div id="position"> 
			<div id="content"> 
						<canvas id="screen" width="553" height="418">Gots to get a better browser, yo.</canvas> 
 
			</div> 
		</div> 
	</div> 
 
</body> 
</html> 