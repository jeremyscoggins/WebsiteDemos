//derived from http://www.canonical.org/~kragen/sw/torus.html
(function(window){
 var shapes={
	cube : {
		faces:"0 1 2 3 -1 4 7 6 5 -1 0 4 5 1 -1 1 5 6 2 -1 2 6 7 3 -1 4 0 3 7 -1",
		points:"1.000000 1.000000 -1.000000 1.000000 -1.000000 -1.000000 -1.000000 -1.000000 -1.000000 -1.000000 1.000000 -1.000000 1.000000 0.999999 1.000000 0.999999 -1.000001 1.000000 -1.000000 -1.000000 1.000000 -1.000000 1.000000 1.000000",
		defaultScale:1
	},
	needle : {
		faces:"0 1 3 2 -1 2 3 5 4 -1 4 5 7 6 -1 6 7 9 8 -1 8 9 11 10 -1 10 11 13 12 -1 12 13 15 14 -1 14 15 17 16 -1 16 17 19 18 -1 18 19 21 20 -1 20 21 23 22 -1 22 23 25 24 -1 24 25 27 26 -1 26 27 29 28 -1 28 29 31 30 -1 30 31 33 32 -1 32 33 35 34 -1 34 35 37 36 -1 36 37 39 38 -1 38 39 41 40 -1 40 41 43 42 -1 42 43 45 44 -1 44 45 47 46 -1 46 47 49 48 -1 48 49 51 50 -1 50 51 53 52 -1 52 53 55 54 -1 54 55 57 56 -1 56 57 59 58 -1 58 59 61 60 -1 60 61 63 62 -1 62 63 65 64 -1 64 65 67 66 -1 66 67 69 68 -1 68 69 71 70 -1 70 71 73 72 -1 72 73 75 74 -1 74 75 77 76 -1 76 77 79 78 -1 78 79 81 80 -1 80 81 83 82 -1 82 83 85 84 -1 84 85 87 86 -1 86 87 89 88 -1 88 89 91 90 -1 90 91 93 92 -1 3 1 95 -1 3 95 93 -1 3 93 5 -1 93 91 5 -1 91 7 5 -1 91 89 7 -1 89 9 7 -1 89 87 9 -1 87 11 9 -1 87 85 11 -1 85 13 11 -1 85 83 13 -1 83 15 13 -1 83 81 15 -1 81 17 15 -1 81 79 17 -1 79 19 17 -1 79 77 19 -1 77 21 19 -1 77 75 21 -1 75 23 21 -1 75 73 23 -1 73 25 23 -1 73 71 25 -1 71 27 25 -1 71 69 27 -1 69 29 27 -1 69 31 29 -1 69 67 31 -1 67 33 31 -1 67 65 33 -1 65 35 33 -1 65 63 35 -1 63 37 35 -1 63 61 37 -1 61 39 37 -1 61 59 39 -1 59 41 39 -1 59 57 41 -1 57 43 41 -1 57 55 43 -1 55 45 43 -1 55 53 45 -1 53 47 45 -1 53 51 47 -1 51 49 47 -1 1 0 94 95 -1 92 93 95 94 -1 0 2 94 -1 2 92 94 -1 2 4 92 -1 4 90 92 -1 4 6 90 -1 6 88 90 -1 6 8 88 -1 8 86 88 -1 8 10 86 -1 10 84 86 -1 10 12 84 -1 12 82 84 -1 12 14 82 -1 14 80 82 -1 14 16 80 -1 16 78 80 -1 16 18 78 -1 18 76 78 -1 18 20 76 -1 20 74 76 -1 20 22 74 -1 22 72 74 -1 22 24 72 -1 24 70 72 -1 24 26 70 -1 26 68 70 -1 26 28 68 -1 28 30 68 -1 30 66 68 -1 30 32 66 -1 32 64 66 -1 32 34 64 -1 34 62 64 -1 34 36 62 -1 36 60 62 -1 36 38 60 -1 38 58 60 -1 38 40 58 -1 40 56 58 -1 40 42 56 -1 42 54 56 -1 42 44 54 -1 44 52 54 -1 44 46 52 -1 46 50 52 -1 46 48 50 -1",
		points:"0.000000 5.175958 -0.713203 0.000000 5.175958 0.713203 0.675598 5.131677 -0.713203 0.675598 5.131677 0.713203 1.339637 4.999592 -0.713203 1.339637 4.999592 0.713203 1.980754 4.781961 -0.713203 1.980754 4.781961 0.713203 2.587979 4.482511 -0.713203 2.587979 4.482511 0.713203 3.150924 4.106364 -0.713203 3.150924 4.106364 0.713203 3.659955 3.659955 -0.713203 3.659955 3.659955 0.713203 4.106364 3.150924 -0.713203 4.106364 3.150924 0.713203 4.482511 2.587979 -0.713203 4.482511 2.587979 0.713203 4.781961 1.980754 -0.713203 4.781961 1.980754 0.713203 4.999592 1.339637 -0.713203 4.999592 1.339637 0.713203 5.131677 0.675599 -0.713203 5.131677 0.675599 0.713203 5.175958 0.000001 -0.713203 5.175958 0.000001 0.713203 5.131677 -0.675597 -0.713203 5.131677 -0.675597 0.713203 4.999592 -1.339635 -0.713203 4.999592 -1.339635 0.713203 4.781962 -1.980752 -0.713203 4.781962 -1.980752 0.713203 4.482512 -2.587978 -0.713203 4.482512 -2.587978 0.713203 4.106364 -3.150923 -0.713203 4.106364 -3.150923 0.713203 3.659956 -3.659954 -0.713203 3.659956 -3.659954 0.713203 3.150925 -4.106363 -0.713203 3.150925 -4.106363 0.713203 2.587980 -4.482511 -0.713203 2.587980 -4.482511 0.713203 1.980755 -4.781961 -0.713203 1.980755 -4.781961 0.713203 1.339638 -4.999591 -0.713203 1.339638 -4.999591 0.713203 0.675600 -5.131677 -0.713203 0.675600 -5.131677 0.713203 0.000002 -5.175958 -0.713203 0.000002 -5.175958 0.713203 -0.675596 -5.131678 -0.713203 -0.675596 -5.131678 0.713203 -1.339634 -4.999592 -0.713203 -1.339634 -4.999592 0.713203 -1.980751 -4.781962 -0.713203 -1.980751 -4.781962 0.713203 -2.587977 -4.482512 -0.713203 -2.587977 -4.482512 0.713203 -3.150922 -4.106365 -0.713203 -3.150922 -4.106365 0.713203 -3.659953 -3.659957 -0.713203 -3.659953 -3.659957 0.713203 -4.106362 -3.150926 -0.713203 -4.106362 -3.150926 0.713203 -4.482510 -2.587981 -0.713203 -4.482510 -2.587981 0.713203 -4.781961 -1.980754 -0.713203 -4.781961 -1.980754 0.713203 -4.999592 -1.339636 -0.713203 -4.999592 -1.339636 0.713203 -5.131677 -0.675597 -0.713203 -5.131677 -0.675597 0.713203 -5.175958 0.000003 -0.713203 -5.175958 0.000003 0.713203 -5.131677 0.675602 -0.713203 -5.131677 0.675602 0.713203 -4.999590 1.339641 -0.713203 -4.999590 1.339641 0.713203 -4.781960 1.980759 -0.713203 -4.781960 1.980759 0.713203 -4.482508 2.587985 -0.713203 -4.482508 2.587985 0.713203 -4.106359 3.150930 -0.713203 -4.106359 3.150930 0.713203 -3.659949 3.659961 -0.713203 -3.659949 3.659961 0.713203 -3.150916 4.106370 -0.713203 -3.150916 4.106370 0.713203 -2.587969 4.482517 -0.713203 -2.587969 4.482517 0.713203 -1.980742 4.781967 -0.713203 -1.980742 4.781967 0.713203 -1.339623 4.999595 -0.713203 -1.339623 4.999595 0.713203 -0.675584 5.131679 -0.713203 -0.675584 5.131679 0.713203",
		defaultScale:.5
	},
	icosphere : {
		faces:"0 1 2 -1 1 0 5 -1 0 2 3 -1 0 3 4 -1 0 4 5 -1 1 5 10 -1 2 1 6 -1 3 2 7 -1 4 3 8 -1 5 4 9 -1 1 10 6 -1 2 6 7 -1 3 7 8 -1 4 8 9 -1 5 9 10 -1 6 10 11 -1 7 6 11 -1 8 7 11 -1 9 8 11 -1 10 9 11 -1",
		points:"0.000000 0.000000 -1.000000 0.723600 -0.525720 -0.447215 -0.276385 -0.850640 -0.447215 -0.894425 0.000000 -0.447215 -0.276385 0.850640 -0.447215 0.723600 0.525720 -0.447215 0.276385 -0.850640 0.447215 -0.723600 -0.525720 0.447215 -0.723600 0.525720 0.447215 0.276385 0.850640 0.447215 0.894425 0.000000 0.447215 0.000000 0.000000 1.000000",
		defaultScale:3
	},
	icosphere2 : {
		faces:"0 12 14 -1 1 12 16 -1 0 14 18 -1 0 18 20 -1 0 20 15 -1 1 16 23 -1 2 13 25 -1 3 17 27 -1 4 19 29 -1 5 21 31 -1 1 23 24 -1 2 25 26 -1 3 27 28 -1 4 29 30 -1 5 31 22 -1 6 32 38 -1 7 33 39 -1 8 34 40 -1 9 35 41 -1 10 36 37 -1 14 13 2 -1 14 12 13 -1 12 1 13 -1 16 15 5 -1 16 12 15 -1 12 0 15 -1 18 17 3 -1 18 14 17 -1 14 2 17 -1 20 19 4 -1 20 18 19 -1 18 3 19 -1 15 21 5 -1 15 20 21 -1 20 4 21 -1 23 22 10 -1 23 16 22 -1 16 5 22 -1 25 24 6 -1 25 13 24 -1 13 1 24 -1 27 26 7 -1 27 17 26 -1 17 2 26 -1 29 28 8 -1 29 19 28 -1 19 3 28 -1 31 30 9 -1 31 21 30 -1 21 4 30 -1 24 32 6 -1 24 23 32 -1 23 10 32 -1 26 33 7 -1 26 25 33 -1 25 6 33 -1 28 34 8 -1 28 27 34 -1 27 7 34 -1 30 35 9 -1 30 29 35 -1 29 8 35 -1 22 36 10 -1 22 31 36 -1 31 9 36 -1 38 37 11 -1 38 32 37 -1 32 10 37 -1 39 38 11 -1 39 33 38 -1 33 6 38 -1 40 39 11 -1 40 34 39 -1 34 7 39 -1 41 40 11 -1 41 35 40 -1 35 8 40 -1 37 41 11 -1 37 36 41 -1 36 9 41 -1",
		points:"0.000000 0.000000 -1.000000 0.723607 -0.525725 -0.447220 -0.276388 -0.850649 -0.447220 -0.894426 0.000000 -0.447216 -0.276388 0.850649 -0.447220 0.723607 0.525725 -0.447220 0.276388 -0.850649 0.447220 -0.723607 -0.525725 0.447220 -0.723607 0.525725 0.447220 0.276388 0.850649 0.447220 0.894426 0.000000 0.447216 0.000000 0.000000 1.000000 0.425323 -0.309011 -0.850654 0.262869 -0.809012 -0.525738 -0.162456 -0.499995 -0.850654 0.425323 0.309011 -0.850654 0.850648 0.000000 -0.525736 -0.688189 -0.499997 -0.525736 -0.525730 0.000000 -0.850652 -0.688189 0.499997 -0.525736 -0.162456 0.499995 -0.850654 0.262869 0.809012 -0.525738 0.951058 0.309013 0.000000 0.951058 -0.309013 0.000000 0.587786 -0.809017 0.000000 0.000000 -1.000000 0.000000 -0.587786 -0.809017 0.000000 -0.951058 -0.309013 0.000000 -0.951058 0.309013 0.000000 -0.587786 0.809017 0.000000 0.000000 1.000000 0.000000 0.587786 0.809017 0.000000 0.688189 -0.499997 0.525736 -0.262869 -0.809012 0.525738 -0.850648 0.000000 0.525736 -0.262869 0.809012 0.525738 0.688189 0.499997 0.525736 0.525730 0.000000 0.850652 0.162456 -0.499995 0.850654 -0.425323 -0.309011 0.850654 -0.425323 0.309011 0.850654 0.162456 0.499995 0.850654",
		defaultScale:3
	},
	cone : {
		faces:"15 5 16 -1 0 5 1 -1 5 0 16 -1 1 5 2 -1 14 5 15 -1 13 5 14 -1 12 5 13 -1 11 5 12 -1 10 5 11 -1 9 5 10 -1 8 5 9 -1 7 5 8 -1 6 5 7 -1 4 5 6 -1 3 5 4 -1 2 5 3 -1 0 1 16 -1 1 15 16 -1 1 2 15 -1 2 14 15 -1 2 3 14 -1 3 13 14 -1 3 4 13 -1 4 12 13 -1 4 6 12 -1 6 7 12 -1 7 11 12 -1 7 8 11 -1 8 10 11 -1 8 9 10 -1",
		points:"0.000000 0.500000 -0.500000 0.191342 0.461940 -0.500000 0.353553 0.353553 -0.500000 0.461940 0.191342 -0.500000 0.500000 -0.000000 -0.500000 0.000000 0.000000 0.500000 0.461940 -0.191342 -0.500000 0.353553 -0.353553 -0.500000 0.191342 -0.461940 -0.500000 0.000000 -0.500000 -0.500000 -0.191342 -0.461940 -0.500000 -0.353553 -0.353554 -0.500000 -0.461940 -0.191342 -0.500000 -0.500000 0.000000 -0.500000 -0.461940 0.191342 -0.500000 -0.353553 0.353554 -0.500000 -0.191341 0.461940 -0.500000",
		defaultScale:3
	},
	sphere : {
		faces:"1 0 10 11 -1 8 7 17 18 -1 2 1 11 12 -1 9 8 18 19 -1 3 2 12 13 -1 4 3 13 14 -1 5 4 14 15 -1 6 5 15 16 -1 7 6 16 17 -1 18 17 29 30 -1 12 11 23 24 -1 19 18 30 31 -1 13 12 24 25 -1 20 19 31 32 -1 14 13 25 26 -1 15 14 26 27 -1 16 15 27 28 -1 17 16 28 29 -1 11 10 22 23 -1 23 22 33 34 -1 30 29 40 41 -1 24 23 34 35 -1 31 30 41 42 -1 25 24 35 36 -1 32 31 42 43 -1 26 25 36 37 -1 27 26 37 38 -1 28 27 38 39 -1 29 28 39 40 -1 40 39 51 52 -1 34 33 45 46 -1 41 40 52 53 -1 35 34 46 47 -1 42 41 53 54 -1 36 35 47 48 -1 43 42 54 55 -1 37 36 48 49 -1 38 37 49 50 -1 39 38 50 51 -1 52 51 62 63 -1 46 45 56 57 -1 53 52 63 64 -1 47 46 57 58 -1 54 53 64 65 -1 48 47 58 59 -1 55 54 65 66 -1 49 48 59 60 -1 50 49 60 61 -1 51 50 61 62 -1 63 62 73 74 -1 57 56 67 68 -1 64 63 74 75 -1 58 57 68 69 -1 65 64 75 76 -1 59 58 69 70 -1 66 65 76 77 -1 60 59 70 71 -1 61 60 71 72 -1 62 61 72 73 -1 73 72 83 84 -1 74 73 84 85 -1 68 67 78 79 -1 75 74 85 86 -1 69 68 79 80 -1 76 75 86 87 -1 70 69 80 81 -1 77 76 87 88 -1 71 70 81 82 -1 72 71 82 83 -1 84 83 94 95 -1 85 84 95 96 -1 79 78 89 90 -1 86 85 96 97 -1 80 79 90 91 -1 87 86 97 98 -1 81 80 91 92 -1 88 87 98 99 -1 82 81 92 93 -1 83 82 93 94 -1 95 94 105 106 -1 96 95 106 107 -1 90 89 100 101 -1 97 96 107 108 -1 91 90 101 102 -1 98 97 108 109 -1 92 91 102 103 -1 99 98 109 110 -1 93 92 103 104 -1 94 93 104 105 -1 105 104 115 116 -1 106 105 116 117 -1 107 106 117 118 -1 101 100 111 112 -1 108 107 118 119 -1 102 101 112 113 -1 109 108 119 120 -1 103 102 113 114 -1 110 109 120 121 -1 104 103 114 115 -1 116 115 126 127 -1 117 116 127 128 -1 118 117 128 129 -1 112 111 122 123 -1 119 118 129 130 -1 113 112 123 124 -1 120 119 130 131 -1 114 113 124 125 -1 121 120 131 132 -1 115 114 125 126 -1 133 9 19 20 -1 21 133 20 -1 0 44 10 -1 21 20 32 -1 10 44 22 -1 21 32 43 -1 22 44 33 -1 21 43 55 -1 33 44 45 -1 21 55 66 -1 45 44 56 -1 56 44 67 -1 21 66 77 -1 67 44 78 -1 21 77 88 -1 78 44 89 -1 21 88 99 -1 89 44 100 -1 21 99 110 -1 21 110 121 -1 100 44 111 -1 21 121 132 -1 111 44 122 -1 21 132 133 -1 127 126 4 5 -1 128 127 5 6 -1 44 0 122 -1 129 128 6 7 -1 0 1 123 122 -1 130 129 7 8 -1 124 123 1 2 -1 131 130 8 9 -1 125 124 2 3 -1 132 131 9 133 -1 126 125 3 4 -1",
		points:"-0.258819 0.000000 0.965926 -0.500000 0.000000 0.866025 -0.707107 0.000000 0.707107 -0.866025 0.000000 0.500000 -0.965926 0.000000 0.258819 -1.000000 0.000000 0.000000 -0.965926 0.000000 -0.258819 -0.866026 0.000000 -0.500000 -0.707107 0.000000 -0.707107 -0.500000 0.000000 -0.866025 -0.224144 0.129409 0.965926 -0.433013 0.250000 0.866025 -0.612372 0.353553 0.707107 -0.750000 0.433013 0.500000 -0.836516 0.482963 0.258819 -0.866025 0.500000 0.000000 -0.836516 0.482963 -0.258819 -0.750000 0.433013 -0.500000 -0.612373 0.353553 -0.707107 -0.433013 0.250000 -0.866025 -0.224144 0.129409 -0.965926 -0.000000 0.000000 -1.000000 -0.129410 0.224144 0.965926 -0.250000 0.433012 0.866025 -0.353554 0.612372 0.707107 -0.433013 0.750000 0.500000 -0.482963 0.836516 0.258819 -0.500000 0.866025 0.000000 -0.482963 0.836516 -0.258819 -0.433013 0.750000 -0.500000 -0.353554 0.612372 -0.707107 -0.250000 0.433013 -0.866025 -0.129410 0.224144 -0.965926 -0.000000 0.258819 0.965926 -0.000000 0.500000 0.866025 -0.000000 0.707106 0.707107 -0.000000 0.866025 0.500000 -0.000000 0.965925 0.258819 -0.000000 1.000000 0.000000 -0.000000 0.965925 -0.258819 -0.000000 0.866025 -0.500000 -0.000000 0.707106 -0.707107 -0.000000 0.500000 -0.866025 -0.000000 0.258819 -0.965926 -0.000001 -0.000000 1.000000 0.129409 0.224144 0.965926 0.249999 0.433012 0.866025 0.353553 0.612372 0.707107 0.433012 0.750000 0.500000 0.482962 0.836516 0.258819 0.499999 0.866025 0.000000 0.482962 0.836516 -0.258819 0.433012 0.750000 -0.500000 0.353553 0.612372 -0.707107 0.250000 0.433013 -0.866025 0.129409 0.224144 -0.965926 0.224143 0.129409 0.965926 0.433012 0.250000 0.866025 0.612372 0.353553 0.707107 0.749999 0.433012 0.500000 0.836515 0.482963 0.258819 0.866025 0.500000 0.000000 0.836516 0.482963 -0.258819 0.749999 0.433012 -0.500000 0.612372 0.353553 -0.707107 0.433012 0.250000 -0.866025 0.224143 0.129409 -0.965926 0.258818 0.000000 0.965926 0.499999 -0.000000 0.866025 0.707106 0.000000 0.707107 0.866025 -0.000000 0.500000 0.965925 -0.000000 0.258819 0.999999 -0.000000 0.000000 0.965925 0.000000 -0.258819 0.866025 -0.000000 -0.500000 0.707106 -0.000000 -0.707107 0.499999 -0.000000 -0.866025 0.258819 0.000000 -0.965926 0.224143 -0.129409 0.965926 0.433012 -0.250000 0.866025 0.612372 -0.353553 0.707107 0.749999 -0.433013 0.500000 0.836515 -0.482963 0.258819 0.866024 -0.500000 0.000000 0.836516 -0.482963 -0.258819 0.749999 -0.433013 -0.500000 0.612372 -0.353553 -0.707107 0.433012 -0.250000 -0.866025 0.224143 -0.129409 -0.965926 0.129409 -0.224144 0.965926 0.249999 -0.433012 0.866025 0.353553 -0.612372 0.707107 0.433012 -0.750000 0.500000 0.482962 -0.836516 0.258819 0.499999 -0.866025 0.000000 0.482962 -0.836516 -0.258819 0.433012 -0.750000 -0.500000 0.353553 -0.612372 -0.707107 0.249999 -0.433013 -0.866025 0.129409 -0.224144 -0.965926 -0.000000 -0.258819 0.965926 -0.000000 -0.500000 0.866025 -0.000000 -0.707106 0.707107 -0.000001 -0.866025 0.500000 -0.000001 -0.965925 0.258819 -0.000000 -0.999999 0.000000 -0.000000 -0.965925 -0.258819 -0.000000 -0.866025 -0.500000 -0.000001 -0.707106 -0.707107 -0.000000 -0.500000 -0.866025 -0.000000 -0.258819 -0.965926 -0.129410 -0.224144 0.965926 -0.250000 -0.433012 0.866025 -0.353554 -0.612372 0.707107 -0.433013 -0.750000 0.500000 -0.482963 -0.836516 0.258819 -0.500000 -0.866025 0.000000 -0.482963 -0.836516 -0.258819 -0.433013 -0.750000 -0.500000 -0.353554 -0.612372 -0.707107 -0.250000 -0.433012 -0.866025 -0.129410 -0.224144 -0.965926 -0.224144 -0.129409 0.965926 -0.433013 -0.250000 0.866025 -0.612372 -0.353553 0.707107 -0.750000 -0.433012 0.500000 -0.836516 -0.482963 0.258819 -0.866025 -0.500000 0.000000 -0.836516 -0.482963 -0.258819 -0.750000 -0.433012 -0.500000 -0.612373 -0.353553 -0.707107 -0.433013 -0.250000 -0.866025 -0.224144 -0.129409 -0.965926 -0.258819 0.000000 -0.965926",
		defaultScale:3
	},
	torus : {
		faces:"0 12 13 1 -1 1 13 14 2 -1 2 14 15 3 -1 3 15 16 4 -1 4 16 17 5 -1 5 17 18 6 -1 6 18 19 7 -1 7 19 20 8 -1 8 20 21 9 -1 9 21 22 10 -1 10 22 23 11 -1 0 11 23 12 -1 12 24 25 13 -1 13 25 26 14 -1 14 26 27 15 -1 15 27 28 16 -1 16 28 29 17 -1 17 29 30 18 -1 18 30 31 19 -1 19 31 32 20 -1 20 32 33 21 -1 21 33 34 22 -1 22 34 35 23 -1 23 35 24 12 -1 24 36 37 25 -1 25 37 38 26 -1 26 38 39 27 -1 27 39 40 28 -1 28 40 41 29 -1 29 41 42 30 -1 30 42 43 31 -1 31 43 44 32 -1 32 44 45 33 -1 33 45 46 34 -1 34 46 47 35 -1 35 47 36 24 -1 36 48 49 37 -1 37 49 50 38 -1 38 50 51 39 -1 39 51 52 40 -1 40 52 53 41 -1 41 53 54 42 -1 42 54 55 43 -1 43 55 56 44 -1 44 56 57 45 -1 45 57 58 46 -1 46 58 59 47 -1 47 59 48 36 -1 48 60 61 49 -1 49 61 62 50 -1 50 62 63 51 -1 51 63 64 52 -1 52 64 65 53 -1 53 65 66 54 -1 54 66 67 55 -1 55 67 68 56 -1 56 68 69 57 -1 57 69 70 58 -1 58 70 71 59 -1 59 71 60 48 -1 60 72 73 61 -1 61 73 74 62 -1 62 74 75 63 -1 63 75 76 64 -1 64 76 77 65 -1 65 77 78 66 -1 66 78 79 67 -1 67 79 80 68 -1 68 80 81 69 -1 69 81 82 70 -1 70 82 83 71 -1 71 83 72 60 -1 72 84 85 73 -1 73 85 86 74 -1 74 86 87 75 -1 75 87 88 76 -1 76 88 89 77 -1 77 89 90 78 -1 78 90 91 79 -1 79 91 92 80 -1 80 92 93 81 -1 81 93 94 82 -1 82 94 95 83 -1 83 95 84 72 -1 84 96 97 85 -1 85 97 98 86 -1 86 98 99 87 -1 87 99 100 88 -1 88 100 101 89 -1 89 101 102 90 -1 90 102 103 91 -1 91 103 104 92 -1 92 104 105 93 -1 93 105 106 94 -1 94 106 107 95 -1 95 107 96 84 -1 96 108 109 97 -1 97 109 110 98 -1 98 110 111 99 -1 99 111 112 100 -1 100 112 113 101 -1 101 113 114 102 -1 102 114 115 103 -1 103 115 116 104 -1 104 116 117 105 -1 105 117 118 106 -1 106 118 119 107 -1 107 119 108 96 -1 108 120 121 109 -1 109 121 122 110 -1 110 122 123 111 -1 111 123 124 112 -1 112 124 125 113 -1 113 125 126 114 -1 114 126 127 115 -1 115 127 128 116 -1 116 128 129 117 -1 117 129 130 118 -1 118 130 131 119 -1 119 131 120 108 -1 120 132 133 121 -1 121 133 134 122 -1 122 134 135 123 -1 123 135 136 124 -1 124 136 137 125 -1 125 137 138 126 -1 126 138 139 127 -1 127 139 140 128 -1 128 140 141 129 -1 129 141 142 130 -1 130 142 143 131 -1 131 143 132 120 -1 132 0 1 133 -1 133 1 2 134 -1 134 2 3 135 -1 135 3 4 136 -1 136 4 5 137 -1 137 5 6 138 -1 138 6 7 139 -1 139 7 8 140 -1 140 8 9 141 -1 141 9 10 142 -1 142 10 11 143 -1 0 132 143 11 -1",
		points:"1.000000 0.000000 0.000000 0.966506 0.000000 0.125000 0.875000 0.000000 0.216506 0.750000 0.000000 0.250000 0.625000 0.000000 0.216506 0.533494 0.000000 0.125000 0.500000 0.000000 0.000000 0.533494 0.000000 -0.125000 0.625000 0.000000 -0.216506 0.750000 0.000000 -0.250000 0.875000 0.000000 -0.216506 0.966506 0.000000 -0.125000 0.866025 0.500000 0.000000 0.837019 0.483253 0.125000 0.757772 0.437500 0.216506 0.649519 0.375000 0.250000 0.541266 0.312500 0.216506 0.462019 0.266747 0.125000 0.433013 0.250000 0.000000 0.462019 0.266747 -0.125000 0.541266 0.312500 -0.216506 0.649519 0.375000 -0.250000 0.757772 0.437500 -0.216506 0.837019 0.483253 -0.125000 0.500000 0.866025 0.000000 0.483253 0.837019 0.125000 0.437500 0.757772 0.216506 0.375000 0.649519 0.250000 0.312500 0.541266 0.216506 0.266747 0.462019 0.125000 0.250000 0.433013 0.000000 0.266747 0.462019 -0.125000 0.312500 0.541266 -0.216506 0.375000 0.649519 -0.250000 0.437500 0.757772 -0.216506 0.483253 0.837019 -0.125000 0.000000 1.000000 0.000000 0.000000 0.966506 0.125000 0.000000 0.875000 0.216506 0.000000 0.750000 0.250000 0.000000 0.625000 0.216506 0.000000 0.533494 0.125000 0.000000 0.500000 0.000000 0.000000 0.533494 -0.125000 0.000000 0.625000 -0.216506 0.000000 0.750000 -0.250000 0.000000 0.875000 -0.216506 0.000000 0.966506 -0.125000 -0.500000 0.866026 0.000000 -0.483253 0.837019 0.125000 -0.437500 0.757772 0.216506 -0.375000 0.649519 0.250000 -0.312500 0.541266 0.216506 -0.266747 0.462019 0.125000 -0.250000 0.433013 0.000000 -0.266747 0.462019 -0.125000 -0.312500 0.541266 -0.216506 -0.375000 0.649519 -0.250000 -0.437500 0.757772 -0.216506 -0.483253 0.837019 -0.125000 -0.866025 0.500000 0.000000 -0.837019 0.483253 0.125000 -0.757772 0.437500 0.216506 -0.649519 0.375000 0.250000 -0.541266 0.312500 0.216506 -0.462019 0.266747 0.125000 -0.433013 0.250000 0.000000 -0.462019 0.266747 -0.125000 -0.541266 0.312500 -0.216506 -0.649519 0.375000 -0.250000 -0.757772 0.437500 -0.216506 -0.837019 0.483253 -0.125000 -1.000000 0.000000 0.000000 -0.966506 0.000000 0.125000 -0.875000 0.000000 0.216506 -0.750000 0.000000 0.250000 -0.625000 0.000000 0.216506 -0.533494 0.000000 0.125000 -0.500000 0.000000 0.000000 -0.533494 0.000000 -0.125000 -0.625000 0.000000 -0.216506 -0.750000 0.000000 -0.250000 -0.875000 0.000000 -0.216506 -0.966506 0.000000 -0.125000 -0.866026 -0.500000 0.000000 -0.837019 -0.483253 0.125000 -0.757772 -0.437500 0.216506 -0.649519 -0.375000 0.250000 -0.541266 -0.312500 0.216506 -0.462019 -0.266747 0.125000 -0.433013 -0.250000 0.000000 -0.462019 -0.266747 -0.125000 -0.541266 -0.312500 -0.216506 -0.649519 -0.375000 -0.250000 -0.757772 -0.437500 -0.216506 -0.837019 -0.483253 -0.125000 -0.500000 -0.866026 0.000000 -0.483253 -0.837019 0.125000 -0.437500 -0.757772 0.216506 -0.375000 -0.649519 0.250000 -0.312500 -0.541266 0.216506 -0.266747 -0.462019 0.125000 -0.250000 -0.433013 0.000000 -0.266747 -0.462019 -0.125000 -0.312500 -0.541266 -0.216506 -0.375000 -0.649519 -0.250000 -0.437500 -0.757772 -0.216506 -0.483253 -0.837019 -0.125000 0.000000 -1.000000 0.000000 0.000000 -0.966506 0.125000 0.000000 -0.875000 0.216506 0.000000 -0.750000 0.250000 0.000000 -0.625000 0.216506 0.000000 -0.533494 0.125000 0.000000 -0.500000 0.000000 0.000000 -0.533494 -0.125000 0.000000 -0.625000 -0.216506 0.000000 -0.750000 -0.250000 0.000000 -0.875000 -0.216506 0.000000 -0.966506 -0.125000 0.500000 -0.866025 0.000000 0.483253 -0.837019 0.125000 0.437500 -0.757772 0.216506 0.375000 -0.649519 0.250000 0.312500 -0.541266 0.216506 0.266747 -0.462019 0.125000 0.250000 -0.433013 0.000000 0.266747 -0.462019 -0.125000 0.312500 -0.541266 -0.216506 0.375000 -0.649519 -0.250000 0.437500 -0.757772 -0.216506 0.483253 -0.837019 -0.125000 0.866025 -0.500000 0.000000 0.837019 -0.483253 0.125000 0.757772 -0.437500 0.216506 0.649519 -0.375000 0.250000 0.541266 -0.312500 0.216506 0.462019 -0.266747 0.125000 0.433013 -0.250000 0.000000 0.462019 -0.266747 -0.125000 0.541266 -0.312500 -0.216506 0.649519 -0.375000 -0.250000 0.757772 -0.437500 -0.216506 0.837019 -0.483253 -0.125000",
		defaultScale:3
	},
	plane : {
		faces:"120 30 2 13 -1 31 48 21 3 -1 48 57 20 21 -1 57 66 19 20 -1 66 75 18 19 -1 75 84 17 18 -1 84 93 16 17 -1 93 102 15 16 -1 102 111 14 15 -1 111 120 13 14 -1 1 12 40 39 -1 39 40 41 38 -1 38 41 42 37 -1 37 42 43 36 -1 36 43 44 35 -1 35 44 45 34 -1 34 45 46 33 -1 33 46 47 32 -1 32 47 48 31 -1 12 11 49 40 -1 40 49 50 41 -1 41 50 51 42 -1 42 51 52 43 -1 43 52 53 44 -1 44 53 54 45 -1 45 54 55 46 -1 46 55 56 47 -1 47 56 57 48 -1 11 10 58 49 -1 49 58 59 50 -1 50 59 60 51 -1 51 60 61 52 -1 52 61 62 53 -1 53 62 63 54 -1 54 63 64 55 -1 55 64 65 56 -1 56 65 66 57 -1 10 9 67 58 -1 58 67 68 59 -1 59 68 69 60 -1 60 69 70 61 -1 61 70 71 62 -1 62 71 72 63 -1 63 72 73 64 -1 64 73 74 65 -1 65 74 75 66 -1 9 8 76 67 -1 67 76 77 68 -1 68 77 78 69 -1 69 78 79 70 -1 70 79 80 71 -1 71 80 81 72 -1 72 81 82 73 -1 73 82 83 74 -1 74 83 84 75 -1 8 7 85 76 -1 76 85 86 77 -1 77 86 87 78 -1 78 87 88 79 -1 79 88 89 80 -1 80 89 90 81 -1 81 90 91 82 -1 82 91 92 83 -1 83 92 93 84 -1 7 6 94 85 -1 85 94 95 86 -1 86 95 96 87 -1 87 96 97 88 -1 88 97 98 89 -1 89 98 99 90 -1 90 99 100 91 -1 91 100 101 92 -1 92 101 102 93 -1 6 5 103 94 -1 94 103 104 95 -1 95 104 105 96 -1 96 105 106 97 -1 97 106 107 98 -1 98 107 108 99 -1 99 108 109 100 -1 100 109 110 101 -1 101 110 111 102 -1 5 4 112 103 -1 103 112 113 104 -1 104 113 114 105 -1 105 114 115 106 -1 106 115 116 107 -1 107 116 117 108 -1 108 117 118 109 -1 109 118 119 110 -1 110 119 120 111 -1 4 0 22 112 -1 112 22 23 113 -1 113 23 24 114 -1 114 24 25 115 -1 115 25 26 116 -1 116 26 27 117 -1 117 27 28 118 -1 118 28 29 119 -1 119 29 30 120 -1",
		points:"1.000000 -1.000000 0.000000 -1.000000 -1.000000 0.000000 1.000000 1.000000 0.000000 -1.000000 1.000000 0.000000 0.800000 -1.000000 0.000000 0.600000 -1.000000 0.000000 0.400000 -1.000000 0.000000 0.200000 -1.000000 0.000000 0.000000 -1.000000 0.000000 -0.200000 -1.000000 0.000000 -0.400000 -1.000000 0.000000 -0.600000 -1.000000 0.000000 -0.800000 -1.000000 0.000000 0.800000 1.000000 0.000000 0.600000 1.000000 0.000000 0.400000 1.000000 0.000000 0.200000 1.000000 0.000000 0.000000 1.000000 0.000000 -0.200000 1.000000 0.000000 -0.400000 1.000000 0.000000 -0.600000 1.000000 0.000000 -0.800000 1.000000 0.000000 1.000000 -0.800000 0.000000 1.000000 -0.600000 0.000000 1.000000 -0.400000 0.000000 1.000000 -0.200000 0.000000 1.000000 0.000000 0.000000 1.000000 0.200000 0.000000 1.000000 0.400000 0.000000 1.000000 0.600000 0.000000 1.000000 0.800000 0.000000 -1.000000 0.800000 0.000000 -1.000000 0.600000 0.000000 -1.000000 0.400000 0.000000 -1.000000 0.200000 0.000000 -1.000000 0.000000 0.000000 -1.000000 -0.200000 0.000000 -1.000000 -0.400000 0.000000 -1.000000 -0.600000 0.000000 -1.000000 -0.800000 0.000000 -0.800000 -0.800000 0.000000 -0.800000 -0.600000 0.000000 -0.800000 -0.400000 0.000000 -0.800000 -0.200000 0.000000 -0.800000 0.000000 0.000000 -0.800000 0.200000 0.000000 -0.800000 0.400000 0.000000 -0.800000 0.600000 0.000000 -0.800000 0.800000 0.000000 -0.600000 -0.800000 0.000000 -0.600000 -0.600000 0.000000 -0.600000 -0.400000 0.000000 -0.600000 -0.200000 0.000000 -0.600000 0.000000 0.000000 -0.600000 0.200000 0.000000 -0.600000 0.400000 0.000000 -0.600000 0.600000 0.000000 -0.600000 0.800000 0.000000 -0.400000 -0.800000 0.000000 -0.400000 -0.600000 0.000000 -0.400000 -0.400000 0.000000 -0.400000 -0.200000 0.000000 -0.400000 0.000000 0.000000 -0.400000 0.200000 0.000000 -0.400000 0.400000 0.000000 -0.400000 0.600000 0.000000 -0.400000 0.800000 0.000000 -0.200000 -0.800000 0.000000 -0.200000 -0.600000 0.000000 -0.200000 -0.400000 0.000000 -0.200000 -0.200000 0.000000 -0.200000 0.000000 0.000000 -0.200000 0.200000 0.000000 -0.200000 0.400000 0.000000 -0.200000 0.600000 0.000000 -0.200000 0.800000 0.000000 0.000000 -0.800000 0.000000 0.000000 -0.600000 0.000000 0.000000 -0.400000 0.000000 0.000000 -0.200000 0.000000 0.000000 0.000000 0.000000 0.000000 0.200000 0.000000 0.000000 0.400000 0.000000 0.000000 0.600000 0.000000 0.000000 0.800000 0.000000 0.200000 -0.800000 0.000000 0.200000 -0.600000 0.000000 0.200000 -0.400000 0.000000 0.200000 -0.200000 0.000000 0.200000 0.000000 0.000000 0.200000 0.200000 0.000000 0.200000 0.400000 0.000000 0.200000 0.600000 0.000000 0.200000 0.800000 0.000000 0.400000 -0.800000 0.000000 0.400000 -0.600000 0.000000 0.400000 -0.400000 0.000000 0.400000 -0.200000 0.000000 0.400000 0.000000 0.000000 0.400000 0.200000 0.000000 0.400000 0.400000 0.000000 0.400000 0.600000 0.000000 0.400000 0.800000 0.000000 0.600000 -0.800000 0.000000 0.600000 -0.600000 0.000000 0.600000 -0.400000 0.000000 0.600000 -0.200000 0.000000 0.600000 0.000000 0.000000 0.600000 0.200000 0.000000 0.600000 0.400000 0.000000 0.600000 0.600000 0.000000 0.600000 0.800000 0.000000 0.800000 -0.800000 0.000000 0.800000 -0.600000 0.000000 0.800000 -0.400000 0.000000 0.800000 -0.200000 0.000000 0.800000 0.000000 0.000000 0.800000 0.200000 0.000000 0.800000 0.400000 0.000000 0.800000 0.600000 0.000000 0.800000 0.800000 0.000000",
		defaultScale:3
	},
 }



	var canvas,
	context,
	go = true,
	solid = true,
	translucent = false,
	trails = false,
	w,
	h,
	torus,
	framerate = 60,
	frameMS = 1000/framerate,
	angle = 0,
	fillColor = 'black',
	lineColor = 'grey';
	
	// === basic wheel reinvention stuff ===
	
	function $(id) {
		return document.getElementById(id);
	}
	
	// comparison function using a key, to pass to .sort()
	function keycomp(key) {
	  return function(a, b) {
		var ka = key(a);
		var kb = key(b);
		if (ka < kb) return -1;
		if (ka > kb) return 1;
		return 0;
	  }
	}
	
	// return a list transformed by a function
	function map(f, list) {
	  var rv = [];
	  for (var ii = 0; ii < list.length; ii++)
	  {
		  rv.push(f(list[ii]));
	  }
	  return rv;
	}
	
	// === 3d transforms ===
	
	// We represent transforms as a 3x4 list of lists (ahem, array of arrays):
	// [[x_from_x, x_from_y, x_from_z, x_off],
	//  [y_from_x, y_from_y, y_from_z, y_off],
	//  [z_from_x, z_from_y, z_from_z, z_off]]
	// And we only actually multiply points through them in xform.
	function translate(x, y, z) {
	  return [[1, 0, 0, x], [0, 1, 0, y], [0, 0, 1, z]];
	}
	function identity() {
		return translate(0, 0, 0);
	}
	// rotation around the Z-axis
	function rotate(theta) {
	  var s = Math.sin(theta);
	  var c = Math.cos(theta);
	  return [[c, -s, 0, 0], [s, c, 0, 0], [0, 0, 1, 0]];
	}
	// exchange two of the X, Y, Z axes --- useful for making rotate() go around
	// another axis :)
	function transpose_axes(a, b) {
	  var rv = identity();
	  var tmp = rv[a];
	  rv[a] = rv[b];
	  rv[b] = tmp;
	  return rv;
	}
	// you'd think we'd have a scale() function too, but I haven't needed it yet.
	// concatenate two transforms --- the magic that makes it all possible
	function concat(x1, x2) {
	  var rv = [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]];
	  for (var ii = 0; ii < 3; ii++) {
		rv[ii][3] = x2[ii][3];
		for (var jj = 0; jj < 3; jj++) {
		  rv[ii][3] += x1[jj][3] * x2[ii][jj];
		  for (var kk = 0; kk < 3; kk++) {
			rv[ii][jj] += x1[kk][jj] * x2[ii][kk];
		  }
		}
	  }
	  return rv;
	}
	// concatenate N transforms.  I'd insert a special case for 0 transforms,
	// but amusingly this function isn't all that performance-critical.
	function concat_n(xforms) {
	  var rv = identity();
	  for (var ii = 0; ii < xforms.length; ii++) rv = concat(rv, xforms[ii]) 
	  return rv;
	}
	// transform a point.
	function xform(xform, p) {
	  var result_vec = []
	  for (var ii = 0; ii < 3; ii++) {
		var rv = xform[ii][3]
		for (var jj = 0; jj < 3; jj++) rv += xform[ii][jj] * p[jj]
		result_vec.push(rv)
	  }
	  return result_vec
	}
	// transform multiple points.
	function xform_points(xf, points) {
	  var xp = []
	  for (var ii = 0; ii < points.length; ii++) {
		xp.push(xform(xf, points[ii]))
	  }
	  return xp
	}
	// perspective-transform a point --- into 2d.
	function persp(p) { return [p[0] / p[2], p[1] / p[2]] }
	// perspective-transform multiple points
	function persp_points(points) {
	  return map(persp, points)
	}
	
	// return the normal of a triangle defined by three points.
	function normal(p1, p2, p3) {
	  var v1 = [p1[0]-p2[0], p1[1]-p2[1], p1[2]-p2[2]]
	  var v2 = [p2[0]-p3[0], p2[1]-p3[1], p2[2]-p3[2]]
	  var n = [v1[1]*v2[2]-v1[2]*v2[1], 
			   v1[2]*v2[0]-v1[0]*v2[2],
			   v1[0]*v2[1]-v1[1]*v2[0]]
	  var mag = Math.sqrt(n[0]*n[0] + n[1]*n[1] + n[2]*n[2])
	  return [n[0]/mag, n[1]/mag, n[2]/mag]
	}
	
	// === 3d shapes ===
	// We represent these as an array of three arrays
	// [points, lines, polies] where each line is two indices into the points array
	// and each poly is three indices into the points array
	
	function dup(array) {
	  var newarray = new Array(array.length)
	  for (var ii = 0; ii < array.length; ii++) newarray[ii] = array[ii]
	  return newarray
	}
	
	// transform a shape, returning a new shape
	function xform_shape(xf, shape) {
	  // de-alias new lines and polies
	  return [xform_points(xf, shape[0]), dup(shape[1]), dup(shape[2])]
	}
	
	// add a new shape onto an old shape, mutating the old one
	function augment(shape1, shape2) {
	  var s1p = shape1[0]
	  var off = s1p.length
	  for (var ii = 0; ii < shape2[0].length; ii++) s1p.push(shape2[0][ii])
	  var s2ll = shape2[1].length  // in case of aliasing
	  for (var ii = 0; ii < s2ll; ii++) 
		shape1[1].push([shape2[1][ii][0] + off, shape2[1][ii][1] + off])
	  var s2pl = shape2[2].length
	  for (var ii = 0; ii < s2pl; ii++) {
		var tri = shape2[2][ii]
		shape1[2].push([tri[0]+off, tri[1]+off, tri[2]+off])
	  }
	}
	
	// given a shape, make a more complicated shape by copying it through transform
	// xf n times, and connecting the corresponding points.  This is more powerful
	// than the usual kind of extrusion, and can be used to create fairly 
	// interesting shapes --- a snail shell from a circle, for instance.
	function extrude_shape(xf, shape, n) {
	  if (n == null) n = 1
	  var new_part = shape
	  var old_line_base = 0 // where the lines to attach the triangles start
	  for (var ii = 0; ii < n; ii++) {
		var new_part = xform_shape(xf, new_part)
		var shape_length = shape[0].length
		var new_line_base = shape[1].length  // for triangles later
		augment(shape, new_part)
		var new_part_length = new_part[0].length
		// connect corresponding points
		for (var jj = 0; jj < new_part_length; jj++) {
		  shape[1].push([shape_length + jj - new_part_length, shape_length + jj])
		}
		// make triangles
		var nlines = new_part[1].length
		// var old_line_base = new_line_base - nlines
		for (var jj = 0; jj < nlines; jj++) {
		  var old_line = shape[1][old_line_base + jj]
		  var new_line = shape[1][new_line_base + jj]
		  shape[2].push([old_line[0], old_line[1], new_line[0]])
		  shape[2].push([new_line[1], new_line[0], old_line[1]])
		}
		old_line_base = new_line_base
	  }
	}
	// a shape consisting of a single point
	function point_shape(x, y, z) { return [[[x, y, z]], [], []] }
	// approximate a circle in the x-y plane around the origin; radius r and n points
	function circle(r, n) {
	  var shape = point_shape(r, 0, 0)
	  extrude_shape(rotate(Math.atan(1)*8/n), shape, n)
	  return shape
	}
	// approximate a torus with major radius r2 and minor radius r1,
	// with correspondingly n2 and n1 points around each axis
	function make_torus(r1, r2, n1, n2) {
	  var c = xform_shape(translate(r2, 0, 0), circle(r1, n1))
	  extrude_shape(concat_n([transpose_axes(1, 2), 
							  rotate(Math.atan(1)*8/n2),
					  transpose_axes(1, 2)]),
			c, n2)
	  return c
	}
	function splitPoints(points)
	{
		var outPoints = [];
		for(var p =0; p< points.length; p+=3)
		{
			outPoints.push([points[p],points[p+1],points[p+2]])
		}
		return outPoints;
	}
	function scale(points, scale)
	{
		for(var p =0; p < points.length; p++)
		{
			points[p][0] = scale * points[p][0];
			points[p][1] = scale * points[p][1];
			points[p][2] = scale * points[p][2];
		}
	}
	function make_cube(r1, r2, n1, n2) {
		var points = [
			[ -r1, -r1, r1 ], //front
			[ r1, -r1, r1 ],
			[ r1, r1, r1 ],
			[ -r1, r1, r1 ],

			[ -r1, -r1, -r1 ], //back
			[ r1, -r1, -r1 ],
			[ r1, r1, -r1 ],
			[ -r1, r1, -r1 ],


		];

		var lines = [
			[0,1],//front
			[1,2],
			[2,0],
			[2,3],
			[3,0],

			[5,4],//back
			[4,7],
			[7,5],
			[7,6],
			[6,5],

			[4,5],//top
			[5,1],
			[1,4],
			[1,0],
			[0,4],

			[3,2],//bottom
			[2,6],
			[6,3],
			[6,7],
			[7,3],

			[4,0],//left
			[0,3],
			[3,4],
			[3,7],
			[7,4],

			[1,5],//right
			[5,6],
			[6,1],
			[6,2],
			[2,1],
		];
		var polys = [
			[0,1,2],//front
			[2,3,0],

			[5,4,7],//back
			[7,6,5],

			[4,5,1],//top
			[1,0,4],

			[3,2,6],//bottom
			[6,7,3],

			[4,0,3],//left
			[3,7,4],

			[1,5,6],//right
			[6,2,1],
		];
		return [points, lines, polys];
	}
	function make_icosphere(size)
	{
		var points = [[0.000000, 0.000000, -1.000000],[ 0.723600, -0.525720, -0.447215],[ -0.276385, -0.850640, -0.447215],[ -0.894425, 0.000000, -0.447215],[ -0.276385, 0.850640, -0.447215],[ 0.723600, 0.525720, -0.447215],[ 0.276385, -0.850640, 0.447215],[ -0.723600, -0.525720, 0.447215],[ -0.723600, 0.525720, 0.447215],[ 0.276385, 0.850640, 0.447215],[ 0.894425, 0.000000, 0.447215],[ 0.000000, 0.000000, 1.000000]]
		var faces = [[0, 1, 2],[ 1, 0, 5],[ 0, 2, 3],[ 0, 3, 4],[ 0, 4, 5],[ 1, 5, 10],[ 2, 1, 6],[ 3, 2, 7],[ 4, 3, 8],[ 5, 4, 9],[ 1, 10, 6],[ 2, 6, 7],[ 3, 7, 8],[ 4, 8, 9],[ 5, 9, 10],[ 6, 10, 11],[ 7, 6, 11],[ 8, 7, 11],[ 9, 8, 11],[ 10, 9, 11]];	
		var lines = [];
		scale(points, size);
		for(var f =0; f < faces.length; f++)
		{
			lines.push([faces[f][0],faces[f][1]]);
			lines.push([faces[f][1],faces[f][2]]);
			lines.push([faces[f][2],faces[f][0]]);
		}
		return [points, lines, faces];
	}
	function make_x3d_shape(xShape, xScale)
	{
		var points = splitPoints(map(function(p){return parseFloat(p);},xShape.points.split(" ")));
		var faceIndexes = xShape.faces.split(" ");
		var tris = [];
		var lines = [];
		for(var f =0; f < faceIndexes.length; f++)
		{
			var tri = [];
			do
			{
				tri.push(faceIndexes[f]);
				if(tri.length ==3)
				{
					tris.push(dup(tri));
				}
				else if(tri.length == 4)
				{
					tris.push([tri[2],tri[3],tri[0]]);
				}
				f++;				
			} while(faceIndexes[f] != -1);
		}
		for(var t = 0; t < tris.length; t++)
		{
			lines.push([tris[t][0],tris[t][1]]);
			lines.push([tris[t][1],tris[t][2]]);
			lines.push([tris[t][2],tris[t][0]]);
		}
		scale(points, xShape.defaultScale * xScale);
		return [points, lines, tris];
	}
	
	// === drawing code ===
	
	// draw a 3d shape on a canvas
	// 95% of the run time is in this function and its kids
	function draw_shape(context, xf, shape, alpha) {
	  //var ctx = canvas.getContext('2d')
	  //var w = canvas.width
	  //var h = canvas.height
	
	  // set up coordinate system so canvas is (-1, -1) to (1, 1)
	  context.save()
	  context.translate(w/2, h/2)
	  context.scale(w/2, h/2)  
	
	  // 1/3 of the time is in these two lines (when not doing polies)
	  var points3d = xform_points(xf, shape[0])
	  var points = persp_points(points3d)
	  var lines = shape[1]
	  // 2/3 of the time is in this loop (when we're not doing polies)
	  if (alpha == null) {
		context.strokeStyle = lineColor;
		context.lineWidth = 1/(w/2);
		context.lineWidth = 0;
		context.beginPath()
		var p1, p2
		for (var ii = 0; ii < lines.length; ii++) {
		  p1 = points[lines[ii][0]]
		  p2 = points[lines[ii][1]]
		  context.moveTo(p1[0], p1[1])
		  context.lineTo(p2[0], p2[1])
		}
		context.stroke()
	  }
	
	  // when we're doing polies, 90% of our time is spent doing polies
	  if (alpha != null) {
		// Sort polygons by depth so we draw the farthest-away stuff first
		// ("painter's algorithm")
		var minusdepth = function(p) {
		  return [-(points3d[p[0]][2] + points3d[p[1]][2] + points3d[p[2]][2]), p] 
		}
		var polies = map(minusdepth, shape[2])
		polies.sort(keycomp(function(p) { return p[0] }))
	
		// draw all the polygons
		var tri, p1, p2, p3, n, bright
		for (var ii = 0; ii < polies.length; ii++) {
		  tri = polies[ii][1]
		  if (alpha == '1') {
			// light surface
		n = normal(points3d[tri[0]], points3d[tri[1]], points3d[tri[2]])
		// I'm not sure how to make backface removal work with perspective: 
		//if (n[2] > 0 && alpha == '1') continue // backface removal
	
		// lighting from (1, -1, -1) direction
		bright = parseInt(((n[0]-n[1]-n[2]) / Math.sqrt(3) * 255))
		if (bright < 20) bright = 20
		  } else {
			// lighting doesn't make sense if the object is transparent,
			// so we color by depth to have some variation in color...
			var maxd = polies[polies.length-1][0]
		var mind = polies[0][0]
		var d = polies[ii][0]
		bright = parseInt((d-mind)/(maxd-mind) * 255)
		  }
		  context.fillStyle = 'rgba(' + bright + ',' + bright + ',' + bright + 
						  ',' + alpha + ')'
		  context.beginPath()
		  p1 = points[tri[0]]
		  p2 = points[tri[1]]
		  p3 = points[tri[2]]
		  context.moveTo(p1[0], p1[1])
		  context.lineTo(p2[0], p2[1])
		  context.lineTo(p3[0], p3[1])
		  //context.closePath();//  seems to be unnecessary
		  context.fill()
		}
	  }
	
	  context.restore()
	}
	// clear a canvas
	function cls(context) {
	  //var ctx = canvas.getContext('2d')
	  context.fillStyle = fillColor;
	  context.fillRect(0, 0, canvas.width, canvas.height)
	}
	
	// === drawing of particular shapes. also DOM. ===
	function unit_cube() {
	  var shape = point_shape(0, 0, 0)
	  extrude_shape(translate(0,0,1), shape)
	  extrude_shape(translate(0,1,0), shape)
	  extrude_shape(translate(1,0,0), shape)
	  return shape
	}
	
	// this was where I tested stuff as I wrote this
	function make_some_junk() {
	  // make a unit cube centered on the origin
	  var shape = xform_shape(translate(-0.5, -0.5, -0.5), unit_cube())
	
	  // add some circles
	  augment(shape, circle(0.707, 16))
	  augment(shape, xform_shape(transpose_axes(0, 2), circle(0.707, 16)))
	  augment(shape, xform_shape(transpose_axes(1, 2), circle(0.707, 16)))
	  augment(shape, circle(1, 15))
	
	  // add a disc
	  var big_disc = circle(2, 20)
	  extrude_shape(translate(0, 0, 0.5), big_disc, 2)
	  augment(shape, big_disc)
	  return shape
	}
	var some_junk = make_some_junk()
	
	function draw_some_junk(context) {
	  var xf = concat_n([transpose_axes(1, 2),
						 rotate(angle),
						 transpose_axes(1, 2),
				 rotate(angle*1.618),
				 translate(0, 0, 2.5)])
	
	  draw_shape(context, xf, some_junk)
	}
	function draw_torus(context) {
	  //var start = new Date()
	  var alpha = null;
	  if (solid)
	  {
	  	alpha = (translucent ? '0.5' : 1);
	  }
	  if (trails) {
		context.globalAlpha = 0.33;
	  } else {
		context.globalAlpha = 1;
	  }
	  draw_shape(context, concat_n([rotate(angle), 
						   transpose_axes(1, 2),
								   rotate(angle / 1.618),  // to reduce periodicity
								   transpose_axes(1, 2),
								   translate(0, 0, 6)]),
				 torus, alpha);
	  //var end = new Date()
	  /*var ms = $('ms')
	  if (ms) {
		var msvalue = ms.value + ' ' + (end.getTime() - start.getTime())
		if (msvalue.length > 25) msvalue = msvalue.substr(msvalue.length - 25)
		ms.value = msvalue
	  }*/
	}
	function tick() {
	  var start = new Date().getTime();
	  if (go)
	  {
		  angle += 3.14159 / framerate / 10;
		  cls(context);
		  draw_torus(context);
	  }
	  setTimeout(tick, Math.max(frameMS-((new Date().getTime())-start),0));
	}
	function init(ev) {
	  //torus = make_torus(1, 3, 12, 12);
	  //torus = make_cube(1, 3, 12, 12);
	  //torus = make_icosphere(3);
	  torus = make_x3d_shape(shapes['icosphere'], 1);
	  canvas = $('canvas');
	  context = canvas.getContext('2d');
	  w = canvas.width;
	  h = canvas.height;
	  $('go').checked = go;
	  $('go').onclick = function(e){
		go = this.checked;
	  }
	  $('fill').checked = solid;
	  $('fill').onclick = function(e){
		solid = this.checked;
	  }
	  $('translucent').checked = translucent;
	  $('translucent').onclick = function(e){
		translucent = this.checked;
	  }
	  $('trails').checked = trails;
	  $('trails').onclick = function(e){
		trails = this.checked;
	  }
	  $('shape').onchange = function(e){
		  torus = make_x3d_shape(shapes[this.options[this.selectedIndex].value], 1);
	  }
	  for(var s in shapes)
	  {
		var opt = document.createElement("OPTION");
		opt.text = s;
		opt.value = s;
		if(s == 'icosphere')
		{
			opt.selected = true;
		}
		$('shape').appendChild(opt);
	  }
	  
	  tick();
	  // this doesn't work: $('fill').addEventListener('change', update, true)
	  // how do you do what I want to do there?
	  cls(context);
	  draw_torus(context);
	}
	window.addEventListener('load', init, true);
})(window);